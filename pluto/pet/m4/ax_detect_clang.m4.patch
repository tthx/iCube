--- ./pet/m4/ax_detect_clang.m4	2023-06-08 13:00:14.803460051 +0200
+++ ../master.tth/pet/m4/ax_detect_clang.m4	2023-06-08 10:32:27.524996176 +0200
@@ -16,6 +16,10 @@
 	     -e 's/-gsplit-dwarf//' \
 	     -e 's/-Wl,--no-keep-files-mapped//'`
 CLANG_LDFLAGS=`$LLVM_CONFIG --ldflags`
+# Construct a -R argument for libtool.
+# This is needed in case some of the clang libraries are shared libraries.
+CLANG_RFLAG=`echo "$CLANG_LDFLAGS" | $SED -e 's/-L/-R/g'`
+
 CLANG_VERSION=`$LLVM_CONFIG --version`
 CLANG_LIB="LLVM-$CLANG_VERSION"
 
@@ -27,10 +31,6 @@
 # Use single libLLVM shared library when available.
 # Otherwise, try and figure out all the required libraries
 if test "$have_lib_llvm" = yes; then
-	# Construct a -R argument for libtool.
-	# This is apparently required to ensure that libpet.so
-	# keeps track of the location where libLLVM can be found.
-	CLANG_RFLAG=`echo "$CLANG_LDFLAGS" | $SED -e 's/-L/-R/g'`
 	CLANG_LIBS="-l$CLANG_LIB"
 else
 	targets=`$LLVM_CONFIG --targets-built`
@@ -50,14 +50,22 @@
 CLANG_PREFIX=`$LLVM_CONFIG --prefix`
 AC_DEFINE_UNQUOTED(CLANG_PREFIX, ["$CLANG_PREFIX"], [Clang installation prefix])
 
-SAVE_CPPFLAGS="$CPPFLAGS"
-CPPFLAGS="$CLANG_CXXFLAGS $CPPFLAGS"
 AC_LANG_PUSH(C++)
+
+SAVE_CPPFLAGS="$CPPFLAGS"
+SAVE_LDFLAGS="$LDFLAGS"
+SAVE_LIBS="$LIBS"
+
+CPPFLAGS="$CLANG_CXXFLAGS -I$srcdir $CPPFLAGS"
 AC_CHECK_HEADER([clang/Basic/SourceLocation.h], [],
-	[AC_ERROR([clang header file not found])])
-AC_EGREP_HEADER([getDefaultTargetTriple], [llvm/Support/Host.h], [],
-	[AC_DEFINE([getDefaultTargetTriple], [getHostTriple],
-	[Define to getHostTriple for older versions of clang])])
+	[AC_MSG_ERROR([clang header file not found])])
+AC_CHECK_HEADER([llvm/TargetParser/Host.h],
+	[AC_DEFINE([HAVE_TARGETPARSER_HOST_H], [],
+		   [Define if llvm/TargetParser/Host.h exists])],
+	[AC_EGREP_HEADER([getDefaultTargetTriple], [llvm/Support/Host.h], [],
+		[AC_DEFINE([getDefaultTargetTriple], [getHostTriple],
+		[Define to getHostTriple for older versions of clang])])
+	])
 AC_EGREP_HEADER([getExpansionLineNumber], [clang/Basic/SourceLocation.h], [],
 	[AC_DEFINE([getExpansionLineNumber], [getInstantiationLineNumber],
 	[Define to getInstantiationLineNumber for older versions of clang])])
@@ -94,11 +102,11 @@
 AC_EGREP_HEADER([ IsProduction], [clang/Driver/Driver.h],
 	[AC_DEFINE([HAVE_ISPRODUCTION], [],
 		[Define if Driver constructor takes IsProduction argument])])
-AC_TRY_COMPILE([#include <clang/Driver/Driver.h>], [
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <clang/Driver/Driver.h>]], [[
 	using namespace clang;
 	DiagnosticsEngine *Diags;
 	new driver::Driver("", "", "", *Diags);
-], [AC_DEFINE([DRIVER_CTOR_TAKES_DEFAULTIMAGENAME], [],
+]])], [AC_DEFINE([DRIVER_CTOR_TAKES_DEFAULTIMAGENAME], [],
 	      [Define if Driver constructor takes default image name])])
 AC_EGREP_HEADER([void HandleTopLevelDecl\(], [clang/AST/ASTConsumer.h],
 	[AC_DEFINE([HandleTopLevelDeclReturn], [void],
@@ -120,19 +128,19 @@
 	[AC_DEFINE([HAVE_LEX_PREPROCESSOROPTIONS_H], [],
 		   [Define if clang/Lex/PreprocessorOptions.h exists])], [],
 	[#include <clang/Basic/LLVM.h>])
-AC_TRY_COMPILE([#include <clang/Basic/TargetInfo.h>], [
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <clang/Basic/TargetInfo.h>]], [[
 	using namespace clang;
 	std::shared_ptr<TargetOptions> TO;
 	DiagnosticsEngine *Diags;
 	TargetInfo::CreateTargetInfo(*Diags, TO);
-], [AC_DEFINE([CREATETARGETINFO_TAKES_SHARED_PTR], [],
+]])], [AC_DEFINE([CREATETARGETINFO_TAKES_SHARED_PTR], [],
 	      [Define if TargetInfo::CreateTargetInfo takes shared_ptr])])
-AC_TRY_COMPILE([#include <clang/Basic/TargetInfo.h>], [
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <clang/Basic/TargetInfo.h>]], [[
 	using namespace clang;
 	TargetOptions *TO;
 	DiagnosticsEngine *Diags;
 	TargetInfo::CreateTargetInfo(*Diags, TO);
-], [AC_DEFINE([CREATETARGETINFO_TAKES_POINTER], [],
+]])], [AC_DEFINE([CREATETARGETINFO_TAKES_POINTER], [],
 	      [Define if TargetInfo::CreateTargetInfo takes pointer])])
 AC_EGREP_HEADER([getLangOpts], [clang/Lex/Preprocessor.h], [],
 	[AC_DEFINE([getLangOpts], [getLangOptions],
@@ -143,27 +151,30 @@
 AC_EGREP_HEADER([translateLineCol], [clang/Basic/SourceManager.h],
 	[AC_DEFINE([HAVE_TRANSLATELINECOL], [],
 	[Define if SourceManager has translateLineCol method])])
-AC_TRY_COMPILE([#include <clang/Frontend/CompilerInstance.h>], [
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+		[[#include <clang/Frontend/CompilerInstance.h>]], [[
 	using namespace clang;
 	DiagnosticConsumer *client;
 	CompilerInstance *Clang;
 	Clang->createDiagnostics(client);
-], [], [AC_DEFINE([CREATEDIAGNOSTICS_TAKES_ARG], [],
+]])], [], [AC_DEFINE([CREATEDIAGNOSTICS_TAKES_ARG], [],
 	[Define if CompilerInstance::createDiagnostics takes argc and argv])])
-AC_TRY_COMPILE([#include <clang/Lex/HeaderSearchOptions.h>], [
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+		[[#include <clang/Lex/HeaderSearchOptions.h>]], [[
 	using namespace clang;
 	HeaderSearchOptions HSO;
 	HSO.AddPath("", frontend::Angled, false, false);
-], [AC_DEFINE([ADDPATH_TAKES_4_ARGUMENTS], [],
+]])], [AC_DEFINE([ADDPATH_TAKES_4_ARGUMENTS], [],
 	[Define if HeaderSearchOptions::AddPath takes 4 arguments])])
 AC_EGREP_HEADER([getLocWithOffset], [clang/Basic/SourceLocation.h], [],
 	[AC_DEFINE([getLocWithOffset], [getFileLocWithOffset],
 	[Define to getFileLocWithOffset for older versions of clang])])
-AC_TRY_COMPILE([#include <clang/Frontend/CompilerInstance.h>], [
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+		[[#include <clang/Frontend/CompilerInstance.h>]], [[
 	using namespace clang;
 	CompilerInstance *Clang;
 	Clang->createPreprocessor(TU_Complete);
-], [AC_DEFINE([CREATEPREPROCESSOR_TAKES_TUKIND], [],
+]])], [AC_DEFINE([CREATEPREPROCESSOR_TAKES_TUKIND], [],
 [Define if CompilerInstance::createPreprocessor takes TranslationUnitKind])])
 AC_EGREP_HEADER([DecayedType], [clang/AST/Type.h],
 	[AC_DEFINE([HAVE_DECAYEDTYPE], [], [Define if DecayedType is defined])])
@@ -194,37 +205,46 @@
 	 AC_DEFINE_UNQUOTED([IK_C], [$IK_C],
 	 [Define to Language::C or InputKind::C for newer versions of clang])
 	])
-AC_TRY_COMPILE([
+# llvmorg-15-init-7544-g93471e65df48
+AC_EGREP_HEADER([setLangDefaults], [clang/Basic/LangOptions.h],
+	[SETLANGDEFAULTS=LangOptions],
+	[SETLANGDEFAULTS=CompilerInvocation])
+AC_DEFINE_UNQUOTED([SETLANGDEFAULTS], [$SETLANGDEFAULTS],
+	[Define to class with setLangDefaults method])
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 	#include <clang/Basic/TargetOptions.h>
 	#include <clang/Lex/PreprocessorOptions.h>
 	#include <clang/Frontend/CompilerInstance.h>
-], [
+
+	#include "set_lang_defaults_arg4.h"
+]], [[
 	using namespace clang;
 	CompilerInstance *Clang;
 	TargetOptions TO;
 	llvm::Triple T(TO.Triple);
 	PreprocessorOptions PO;
-	CompilerInvocation::setLangDefaults(Clang->getLangOpts(), IK_C,
-			T, PO, LangStandard::lang_unspecified);
-], [AC_DEFINE([SETLANGDEFAULTS_TAKES_5_ARGUMENTS], [],
+	SETLANGDEFAULTS::setLangDefaults(Clang->getLangOpts(), IK_C,
+			T, setLangDefaultsArg4(PO),
+			LangStandard::lang_unspecified);
+]])], [AC_DEFINE([SETLANGDEFAULTS_TAKES_5_ARGUMENTS], [],
 	[Define if CompilerInvocation::setLangDefaults takes 5 arguments])])
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 	#include <clang/Frontend/CompilerInstance.h>
 	#include <clang/Frontend/CompilerInvocation.h>
-], [
+]], [[
 	using namespace clang;
 	CompilerInvocation *invocation;
 	CompilerInstance *Clang;
 	Clang->setInvocation(std::make_shared<CompilerInvocation>(*invocation));
-], [AC_DEFINE([SETINVOCATION_TAKES_SHARED_PTR], [],
+]])], [AC_DEFINE([SETINVOCATION_TAKES_SHARED_PTR], [],
 	[Defined if CompilerInstance::setInvocation takes a shared_ptr])])
-AC_TRY_COMPILE([
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 	#include <clang/AST/Decl.h>
-], [
+]], [[
 	clang::FunctionDecl *fd;
 	fd->getBeginLoc();
 	fd->getEndLoc();
-],
+]])],
 	[AC_DEFINE([HAVE_BEGIN_END_LOC], [],
 		[Define if getBeginLoc and getEndLoc should be used])])
 AC_CHECK_HEADER([llvm/Option/Arg.h],
@@ -237,17 +257,50 @@
 AC_CHECK_HEADER([clang/Basic/LangStandard.h],
 	[AC_DEFINE([HAVE_CLANG_BASIC_LANGSTANDARD_H], [],
 		   [Define if clang/Basic/LangStandard.h exists])])
-AC_LANG_POP
-CPPFLAGS="$SAVE_CPPFLAGS"
+AC_EGREP_HEADER([setDiagnosticGroupWarningAsError], [clang/Basic/Diagnostic.h],
+	[AC_DEFINE([HAVE_SET_DIAGNOSTIC_GROUP_WARNING_AS_ERROR], [],
+	[Define if DiagnosticsEngine::setDiagnosticGroupWarningAsError \
+	is available])])
+# llvmorg-15-init-8223-g7d644e1215b3
+AC_EGREP_HEADER([ext_implicit_function_decl_c99],
+		[clang/Basic/DiagnosticCategories.h], [],
+	[AC_DEFINE([ext_implicit_function_decl_c99],
+	[ext_implicit_function_decl],
+	[Define to ext_implicit_function_decl for older versions of clang])])
 
-SAVE_LDFLAGS="$LDFLAGS"
 LDFLAGS="$CLANG_LDFLAGS $LDFLAGS"
 
+# A test program for checking whether linking against libclang-cpp works.
+m4_define([_AX_DETECT_CLANG_PROGRAM], [AC_LANG_PROGRAM(
+	[[#include <clang/Frontend/CompilerInstance.h>]],
+	[[
+		new clang::CompilerInstance();
+	]])])
+
 # Use single libclang-cpp shared library when available.
 # Otherwise, use a selection of clang libraries that appears to work.
 AC_CHECK_LIB([clang-cpp], [main], [have_lib_clang=yes], [have_lib_clang=no])
 if test "$have_lib_clang" = yes; then
-	CLANG_LIBS="-lclang-cpp $CLANG_LIBS"
+	# The LLVM libraries may be linked into libclang-cpp already.
+	# Linking against them again can cause errors about options
+	# being registered more than once.
+	# Check whether linking against libclang-cpp requires
+	# linking against the LLVM libraries as well.
+	# Fail if linking fails with or without the LLVM libraries.
+	AC_MSG_CHECKING([whether libclang-cpp needs LLVM libraries])
+	LIBS="-lclang-cpp $SAVE_LIBS"
+	AC_LINK_IFELSE([_AX_DETECT_CLANG_PROGRAM], [clangcpp_needs_llvm=no], [
+		LIBS="-lclang-cpp $CLANG_LIBS $SAVE_LIBS"
+		AC_LINK_IFELSE([_AX_DETECT_CLANG_PROGRAM],
+			[clangcpp_needs_llvm=yes],
+			[clangcpp_needs_llvm=unknown])
+	])
+	AC_MSG_RESULT([$clangcpp_needs_llvm])
+	AS_IF([test "$clangcpp_needs_llvm" = "no"],
+			[CLANG_LIBS="-lclang-cpp"],
+	      [test "$clangcpp_needs_llvm" = "yes"],
+			[CLANG_LIBS="-lclang-cpp $CLANG_LIBS"],
+	      [AC_MSG_FAILURE([unable to link against libclang-cpp])])
 else
 	CLANG_LIBS="-lclangBasic -lclangDriver $CLANG_LIBS"
 	CLANG_LIBS="-lclangAnalysis -lclangAST -lclangLex $CLANG_LIBS"
@@ -258,5 +311,9 @@
 	CLANG_LIBS="-lclangFrontend -lclangSerialization $CLANG_LIBS"
 fi
 
+CPPFLAGS="$SAVE_CPPFLAGS"
 LDFLAGS="$SAVE_LDFLAGS"
+LIBS="$SAVE_LIBS"
+
+AC_LANG_POP
 ])
